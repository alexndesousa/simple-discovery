{"version":3,"sources":["assets/placeholder.png","utils/utils.js","services/authService.js","services/discoveryService.js","components/LoadingModal.js","components/MusicItem.js","components/SearchForm.js","components/PlaylistForm.js","components/MusicContainer.js","components/SearchContainer.js","components/AuthModal.js","App.js","index.js"],"names":["module","exports","chunkArray","array","size","newArray","i","length","push","slice","authenticateUser","state","text","possible","charAt","Math","floor","random","generateRandomString","url","encodeURIComponent","window","location","getAuthorizationHeader","setHeader","authInfo","query","pairs","hash","substring","split","pair","decodeURIComponent","decodeURLParameters","Authorization","token_type","access_token","baseUrl","axios","interceptors","response","use","error","console","log","config","status","originalRequest","milliseconds","Promise","resolve","reject","setTimeout","method","data","headers","sleepRequest","getUserProfileInformation","header","get","then","id","getSimilarArtists","endpoint","artists","map","info","getMultipleSimilarArtists","artistIDs","allArtistIDs","promises","concat","all","filter","item","index","indexOf","getArtistsTopSongs","allSongs","artist","songURIs","tracks","uri","createPlaylist","userID","post","name","description","populatePlaylist","playlistID","songBundle","uris","getArtistsAlbums","albumIDs","allAlbumIDs","artistID","artistAlbums","items","getAlbumsTracks","allTracks","albumBundle","toString","trackIdsForThisBundle","albums","album","flat","getAudioFeatures","audioFeatures","tracksBundle","audio_features","getAudioFeature","trackID","getNumberOfTracksInPlaylist","total","getPlaylistsArtists","amountOfTracks","allArtists","allPromises","offset","track","setUserPlaylists","formattedData","image","images","setArtists","setArtistSearched","formattedArtists","undefined","placeholderImage","catch","setSongs","setSongSearched","formattedSongs","artist_id","setPlaylistCreated","songsToAdd","numberOfTracks","relatedArtists","playlist_id","songID","allFeatures","allAlbums","allAudioFeatures","songAudioFeatures","feature","tempo","energy","valence","features","useStyles","makeStyles","theme","paper","position","maxWidth","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","borderRadius","LoadingModal","open","handleClose","isPlaylistCreated","isCloseAllowed","classes","Modal","aria-labelledby","aria-describedby","onClose","disableBackdropClick","disableEscapeKeyDown","style","display","alignItems","justifyContent","className","align","CircularProgress","card","media","height","MusicItem","functionToExecute","useState","setOpen","allowClose","setAllowClose","useEffect","Grid","Card","onClick","CardActionArea","CardMedia","title","CardContent","Typography","variant","component","SearchForm","searchLabel","newSearch","handleSearch","setValues","type","discoveryFunction","discoveryService","searched","setSearched","toggleSearch","container","direction","justify","margin","width","TextField","label","value","onChange","onKeyPress","ev","key","Button","PlaylistForm","MusicContainer","musicItems","minHeight","back_button","left","SearchContainer","isPageVisible","togglePage","toggleMainMenu","IconButton","fontSize","createMuiTheme","primary","main","AuthModal","authFunction","ThemeProvider","color","App","newPlaylistSearch","setNewPlaylistSearch","newArtistSearch","setNewArtistSearch","newSongSearch","setNewSongSearch","songs","userPlaylists","playlistCreated","isMainMenuVisible","setMainMenuVisibility","isArtistPageVisible","setArtistPageVisibility","isSongPageVisible","setSongPageVisibility","isPlaylistPageVisible","setPlaylistPageVisibility","isAuthModalVisible","setAuthOpenVisibility","togglePlaylistPage","toggleArtistPage","toggleSongPage","handleAuthClose","href","createPlaylistFromPlaylist_Artist","createPlaylistWithSimilarArtists","createPlaylistWithSimilarSongs","listOfPlaylists","playlist","toUpperCase","includes","listOfArtists","listOfSongs","MainMenu","PlaylistPage","event","target","ArtistPage","SongPage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.92048fb9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/placeholder.f7c55a13.png\";","const chunkArray = (array, size) => {\r\n  let newArray = [];\r\n  for (let i = 0; i < array.length; i += size) {\r\n    newArray.push(array.slice(i, i + size));\r\n  }\r\n  return newArray;\r\n};\r\n\r\nconst generateRandomString = length => {\r\n  let text = \"\";\r\n  const possible =\r\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\n  while (text.length <= length) {\r\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n  }\r\n\r\n  return text;\r\n};\r\n\r\nexport { chunkArray, generateRandomString };\r\n","import {generateRandomString} from \"../utils/utils\"\r\n\r\nconst authenticateUser = () => {\r\n    const client_id = \"a4e259d0257745afb6d9bc995d65808d\";\r\n    const redirect_uri = \"https://alexndesousa.github.io/simple-discovery/\";\r\n    const scope =\r\n      \"user-top-read user-read-private user-read-email playlist-modify-public playlist-read-private\";\r\n    const state = generateRandomString(16);\r\n    const url =\r\n      \"https://accounts.spotify.com/authorize?response_type=token\" +\r\n      \"&client_id=\" +\r\n      encodeURIComponent(client_id) +\r\n      \"&scope=\" +\r\n      encodeURIComponent(scope) +\r\n      \"&redirect_uri=\" +\r\n      encodeURIComponent(redirect_uri) +\r\n      \"&state=\" +\r\n      encodeURIComponent(state);\r\n    window.location = url;\r\n  };\r\n\r\nconst decodeURLParameters = () => {\r\n    const queryString = window.location.hash.substring(1);\r\n    let query = {};\r\n    let pairs = queryString.split(\"&\");\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      let pair = pairs[i].split(\"=\");\r\n      query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\r\n    }\r\n    return query;\r\n  };\r\n\r\n  const getAuthorizationHeader = (setHeader) => {\r\n    const authInfo = decodeURLParameters();\r\n    const newHeader = {\r\n      Authorization: \" \" + authInfo.token_type + \" \" + authInfo.access_token\r\n    };\r\n    setHeader(newHeader);\r\n  };\r\n\r\n  export {authenticateUser, getAuthorizationHeader}","import axios from \"axios\";\r\nimport { chunkArray } from \"../utils/utils\";\r\nimport placeholderImage from \"../assets/placeholder.png\";\r\nimport { authenticateUser } from \"./authService\"\r\n\r\nconst baseUrl = \"https://api.spotify.com/v1\";\r\n\r\nconst sleepRequest = (milliseconds, originalRequest) => {\r\n  console.log(\"originalRequest\", originalRequest);\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(\r\n      () =>\r\n        resolve(\r\n          axios({\r\n            method: originalRequest.method,\r\n            url: originalRequest.url,\r\n            data: originalRequest.data,\r\n            headers: originalRequest.headers\r\n          })\r\n        ),\r\n      milliseconds\r\n    );\r\n  });\r\n};\r\n\r\naxios.interceptors.response.use(\r\n  response => {\r\n    return response;\r\n  },\r\n  error => {\r\n    console.log(\"error.response\", error.response);\r\n    const {\r\n      config,\r\n      response: { status }\r\n    } = error;\r\n    const originalRequest = config;\r\n    if (status === 429 || status === 500) {\r\n      return sleepRequest(\r\n        error.response.headers[\"retry-after\"] * 1000,\r\n        originalRequest\r\n      );\r\n    } else if (status === 401) {\r\n      authenticateUser()\r\n      return Promise.reject(error);\r\n    } else {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n);\r\n\r\nconst getUserProfileInformation = (header) => {\r\n  return axios.get(baseUrl + \"/me\", { headers: header }).then(response => {\r\n    // const formattedData = {\r\n    //   username: response.data.display_name,\r\n    //   id: response.data.id,\r\n    //   email: response.data.email,\r\n    //   country: response.country\r\n    // };\r\n    return response.data.id;\r\n  });\r\n};\r\n\r\nconst getUsersPlaylists = (header, setUserPlaylists) => {\r\n  return axios\r\n    .get(baseUrl + \"/me/playlists?limit=50\", { headers: header })\r\n    .then(response => {\r\n      console.log(\"response from playlists\", response.data);\r\n      const formattedData = response.data.items.map(info => {\r\n        let formatted = {\r\n          name: info.name,\r\n          id: info.id,\r\n          image: info.images[0].url\r\n        };\r\n        return formatted;\r\n      });\r\n      setUserPlaylists(formattedData);\r\n      console.log(\"formatted data\", formattedData);\r\n    });\r\n};\r\n\r\nconst searchForArtist = (query, header, setArtists, setArtistSearched) => {\r\n  const type = \"artist\";\r\n  const endpoint =\r\n    baseUrl +\r\n    \"/search?q=\" +\r\n    encodeURIComponent(query) +\r\n    \"&type=\" +\r\n    encodeURIComponent(type);\r\n  return axios\r\n    .get(endpoint, { headers: header })\r\n    .then(response => {\r\n      const formattedArtists = response.data.artists.items.map(info => {\r\n        let pair = {\r\n          name: info.name,\r\n          id: info.id,\r\n          image:\r\n            info.images[0] !== undefined ? info.images[0].url : placeholderImage\r\n        };\r\n        return pair;\r\n      });\r\n      setArtists(formattedArtists);\r\n      setArtistSearched(false);\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    });\r\n};\r\n\r\nconst searchForSong = (query, header, setSongs, setSongSearched) => {\r\n  const type = \"track\";\r\n  const endpoint =\r\n    baseUrl +\r\n    \"/search?q=\" +\r\n    encodeURIComponent(query) +\r\n    \"&type=\" +\r\n    encodeURIComponent(type);\r\n  return axios\r\n    .get(endpoint, { headers: header })\r\n    .then(response => {\r\n      console.log(\"SONG SEARCH RESPONSE\", response);\r\n      const formattedSongs = response.data.tracks.items.map(info => {\r\n        let pair = {\r\n          name: info.name,\r\n          id: info.id,\r\n          artist: info.artists[0].name,\r\n          artist_id: info.artists[0].id,\r\n          image: info.album.images[0].url\r\n        };\r\n        return pair;\r\n      });\r\n      setSongs(formattedSongs);\r\n      setSongSearched(false);\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    });\r\n};\r\n\r\nconst getSimilarArtists = (id, header) => {\r\n  const endpoint = baseUrl + \"/artists/\" + id + \"/related-artists\";\r\n  return axios.get(endpoint, { headers: header }).then(response => {\r\n    return response.data.artists.map(info => info.id);\r\n  });\r\n};\r\n\r\nconst getMultipleSimilarArtists = (artistIDs, header) => {\r\n  let allArtistIDs = [];\r\n  const promises = artistIDs.map(id =>\r\n    getSimilarArtists(id, header).then(response => {\r\n      allArtistIDs = allArtistIDs.concat(response);\r\n      return response;\r\n    })\r\n  );\r\n  return Promise.all(promises).then(() => {\r\n    const allArtistIDsNoDuplicates = allArtistIDs.filter(\r\n      (item, index, array) => array.indexOf(item) === index\r\n    );\r\n    return allArtistIDsNoDuplicates;\r\n  });\r\n};\r\n\r\nconst getArtistsTopSongs = (artists, header) => {\r\n  let allSongs = [];\r\n  const endpoint = baseUrl + \"/artists/\";\r\n  const promises = artists.map(artist => {\r\n    return axios\r\n      .get(endpoint + artist + \"/top-tracks?country=GB\", { headers: header })\r\n      .then(response => {\r\n        const songURIs = response.data.tracks.map(info => info.uri);\r\n        allSongs = allSongs.concat(songURIs);\r\n      });\r\n  });\r\n  return Promise.all(promises).then(() => {\r\n    return allSongs;\r\n  });\r\n};\r\n\r\nconst createPlaylist = (header, userID) => {\r\n  //MUST NOT FORGET TO CHANGE USER ID\r\n  const endpoint = baseUrl + \"/users/\" + userID + \"/playlists\";\r\n  header[\"Content-Type\"] = \"application/json\";\r\n  const body = {\r\n    name: \"Simple discovery\",\r\n    description: \"Created by simple-discovery\"\r\n  };\r\n  return axios.post(endpoint, body, { headers: header }).then(response => {\r\n    return response.data.id;\r\n  });\r\n};\r\n\r\nconst populatePlaylist = (allSongs, playlistID, header) => {\r\n  console.log(\"final allSongs\", allSongs);\r\n  const promises = chunkArray(allSongs, 100).map(songBundle => {\r\n    return axios\r\n      .post(\r\n        baseUrl + \"/playlists/\" + playlistID + \"/tracks\",\r\n        { uris: songBundle },\r\n        { headers: header }\r\n      )\r\n      .then(response => {\r\n        return response;\r\n      });\r\n  });\r\n  return Promise.all(promises);\r\n};\r\n\r\n//worth noting that i can increase the minimum amount of albums it finds for each artist\r\n//default is 20, up to a maximum of 50\r\nconst getArtistsAlbums = (artistIDs, header) => {\r\n  let albumIDs = [];\r\n  let allAlbumIDs = [];\r\n  const promises = artistIDs.map(artistID => {\r\n    return axios\r\n      .get(baseUrl + \"/artists/\" + artistID + \"/albums\", { headers: header })\r\n      .then(response => {\r\n        const artistAlbums = response.data.items.map(item => item.id);\r\n        if (albumIDs.length + artistAlbums.length <= 20) {\r\n          albumIDs = albumIDs.concat(artistAlbums);\r\n        } else {\r\n          allAlbumIDs.push(albumIDs);\r\n          albumIDs = [].concat(artistAlbums);\r\n        }\r\n        return response;\r\n      });\r\n  });\r\n  return Promise.all(promises).then(response => {\r\n    allAlbumIDs.push(albumIDs);\r\n    return allAlbumIDs;\r\n  });\r\n};\r\n\r\nconst getAlbumsTracks = (albumIDs, header) => {\r\n  let allTracks = [];\r\n  const promises = albumIDs.map(albumBundle => {\r\n    return axios\r\n      .get(baseUrl + \"/albums/?ids=\" + albumBundle.toString(), {\r\n        headers: header\r\n      })\r\n      .then(response => {\r\n        const trackIdsForThisBundle = response.data.albums.map(album =>\r\n          album.tracks.items.map(item => item.id)\r\n        );\r\n        allTracks = allTracks.concat(trackIdsForThisBundle.flat());\r\n        return response;\r\n      });\r\n  });\r\n\r\n  return Promise.all(promises).then(response => {\r\n    return chunkArray(allTracks, 100);\r\n  });\r\n};\r\n\r\nconst getAudioFeatures = (allTracks, header) => {\r\n  let audioFeatures = [];\r\n  const promises = allTracks.map(tracksBundle => {\r\n    return axios\r\n      .get(baseUrl + \"/audio-features/?ids=\" + tracksBundle.toString(), {\r\n        headers: header\r\n      })\r\n      .then(response => {\r\n        audioFeatures = audioFeatures.concat(response.data.audio_features);\r\n        return response;\r\n      });\r\n  });\r\n\r\n  return Promise.all(promises).then(response => {\r\n    return audioFeatures;\r\n  });\r\n};\r\n\r\nconst getAudioFeature = (trackID, header) => {\r\n  return axios\r\n    .get(baseUrl + \"/audio-features/\" + encodeURIComponent(trackID), {\r\n      headers: header\r\n    })\r\n    .then(response => {\r\n      return response.data;\r\n    });\r\n};\r\n\r\nconst getNumberOfTracksInPlaylist = (playlistID, header) => {\r\n  return axios\r\n    .get(baseUrl + \"/playlists/\" + playlistID, { headers: header })\r\n    .then(response => {\r\n      return response.data.tracks.total;\r\n    });\r\n};\r\n\r\nconst getPlaylistsArtists = (playlistID, amountOfTracks, header) => {\r\n  const maxTracksPerPage = 100;\r\n  let allArtists = [];\r\n  let allPromises = [];\r\n\r\n  for (let offset = 0; offset < amountOfTracks; offset += maxTracksPerPage) {\r\n    allPromises.push(\r\n      axios\r\n        .get(\r\n          baseUrl + \"/playlists/\" + playlistID + \"/tracks?offset=\" + offset,\r\n          { headers: header }\r\n        )\r\n        .then(response => {\r\n          const artistIDs = response.data.items\r\n            .map(item => item.track.artists[0].id)\r\n            .filter((item, index, array) => array.indexOf(item) === index);\r\n          allArtists = allArtists.concat(artistIDs);\r\n          return response;\r\n        })\r\n    );\r\n  }\r\n\r\n  return Promise.all(allPromises).then(response => {\r\n    return allArtists;\r\n  });\r\n};\r\n\r\nconst getPlaylistsTracks = (playlistID, amountOfTracks, header) => {\r\n  const maxTracksPerPage = 100;\r\n  let allTracks = [];\r\n  let allPromises = [];\r\n\r\n  for (let offset = 0; offset < amountOfTracks; offset += maxTracksPerPage) {\r\n    allPromises.push(\r\n      axios\r\n        .get(\r\n          baseUrl + \"/playlists/\" + playlistID + \"/tracks?offset=\" + offset,\r\n          { headers: header }\r\n        )\r\n        .then(response => {\r\n          //maps to the artist id and removes duplicates\r\n          console.log(\"RESPONSE FROM GETPLAYLISTTRACKS\", response);\r\n          const trackIDs = response.data.items\r\n            .map(item => {\r\n              let obj = {\r\n                songID: item.track.id,\r\n                id: item.track.artists[0].id\r\n              };\r\n              return obj;\r\n            })\r\n            .filter((item, index, array) => array.indexOf(item) === index);\r\n          allTracks = allTracks.concat(trackIDs);\r\n          return response;\r\n        })\r\n    );\r\n  }\r\n\r\n  return Promise.all(allPromises).then(response => {\r\n    return allTracks;\r\n  });\r\n};\r\n\r\nconst createPlaylistFromPlaylist_ArtistBased = (id, header, setPlaylistCreated) => {\r\n  let songsToAdd = []\r\n  getNumberOfTracksInPlaylist(id, header)\r\n  .then(numberOfTracks => getPlaylistsArtists(id, numberOfTracks, header))\r\n  .then(artistIDs => getMultipleSimilarArtists(artistIDs, header))\r\n  .then(relatedArtists => getArtistsTopSongs(relatedArtists, header))\r\n  .then(allSongs => {\r\n    songsToAdd = allSongs\r\n    return getUserProfileInformation(header)\r\n  })\r\n  .then(userID => createPlaylist(header, userID))\r\n  .then(playlist_id => populatePlaylist(songsToAdd, playlist_id, header))\r\n  .then(() => setPlaylistCreated(true))\r\n}\r\n\r\nconst createPlaylistWithSimilarArtists = (id, header, setPlaylistCreated) => {\r\n  let songsToAdd = []\r\n  getSimilarArtists(id, header)\r\n  .then(relatedArtists => getArtistsTopSongs(relatedArtists, header))\r\n  .then(allSongs => {\r\n    songsToAdd = allSongs\r\n    return getUserProfileInformation(header)\r\n  })\r\n  .then(userID => createPlaylist(header, userID))\r\n  .then(playlist_id => populatePlaylist(songsToAdd, playlist_id, header))\r\n  .then(() => setPlaylistCreated(true))\r\n}\r\n\r\nconst createPlaylistWithSimilarSongs = (id, songID, header, setPlaylistCreated) => {\r\n  let allFeatures = []\r\n  let allSongs = []\r\n  getSimilarArtists(id, header)\r\n  .then(relatedArtists => getArtistsAlbums(relatedArtists, header))\r\n  .then(allAlbums => getAlbumsTracks(allAlbums, header))\r\n  .then(allTracks => getAudioFeatures(allTracks, header))\r\n  .then(allAudioFeatures => {\r\n    allFeatures = allAudioFeatures\r\n    return getAudioFeature(songID, header)\r\n  })\r\n  .then(songAudioFeatures => {\r\n    allSongs = allFeatures\r\n      .filter(feature => {\r\n        return ( feature !== null ?\r\n          feature.tempo > songAudioFeatures.tempo * 0.9 &&\r\n          feature.tempo < songAudioFeatures.tempo * 1.1 &&\r\n          (feature.energy > songAudioFeatures.energy * 0.8 &&\r\n            feature.energy <\r\n              songAudioFeatures.energy * 1.2) &&\r\n          (feature.valence >\r\n            songAudioFeatures.valence * 0.8 &&\r\n            feature.valence < songAudioFeatures.valence * 1.2)\r\n        : false);\r\n      })\r\n      .map(features => features.uri)\r\n  })\r\n  .then(() => getUserProfileInformation(header))\r\n  .then(userID => createPlaylist(header,userID))\r\n  .then(playlist_id => populatePlaylist(allSongs,playlist_id,header))\r\n  .then(() => setPlaylistCreated(true))\r\n};\r\n\r\n  //EXPERIMENTAL FUNCTIONALITY - meant to create a playlist from similar songs to every song in a given playlist\r\n\r\n  // // worth noting that we should also include the current artist into this. this would be handled in the get similar artists\r\n  // const createPlaylistFromPlaylist_Song = id => {\r\n\r\n  //   discoveryService.getNumberOfTracksInPlaylist(id, header)\r\n  //   .then(numberOfTracks => {\r\n  //     discoveryService.getPlaylistsTracks(id, numberOfTracks, header).then(allTracks => {\r\n  //       console.log('allTRACKSSS', allTracks)\r\n  //       const limiter1 = new Bottleneck({\r\n  //         maxConcurrent:1,\r\n  //         minTime:5000\r\n  //       })\r\n  //       const limiter2 = new Bottleneck({\r\n  //         maxConcurrent:1,\r\n  //         minTime:1000\r\n  //       })\r\n  //       const promises = allTracks.map(val => {\r\n  //         const id = val.id\r\n  //         const songID = val.songID\r\n  //         limiter1.schedule(() => discoveryService.getSimilarArtists(id, header).then(relatedArtists => {\r\n  //           limiter2.schedule(() => discoveryService\r\n  //             .getArtistsAlbums(relatedArtists, header)\r\n  //             .then(allAlbums => {\r\n  //               discoveryService\r\n  //                 .getAlbumsTracks(allAlbums, header)\r\n  //                 .then(allTracks => {\r\n  //                   discoveryService\r\n  //                     .getAudioFeatures(allTracks, header)\r\n  //                     .then(allAudioFeatures => {\r\n  //                       discoveryService\r\n  //                         .getAudioFeature(songID, header)\r\n  //                         .then(songAudioFeatures => {\r\n  //                           console.log(\"songaudiofeatures\", songAudioFeatures);\r\n  //                           return allAudioFeatures\r\n  //                             .filter(feature => {\r\n  //                               return (\r\n  //                                 feature.tempo > songAudioFeatures.tempo * 0.9 &&\r\n  //                                 feature.tempo < songAudioFeatures.tempo * 1.1 &&\r\n  //                                 (feature.energy > songAudioFeatures.energy * 0.8 &&\r\n  //                                   feature.energy <\r\n  //                                     songAudioFeatures.energy * 1.2) &&\r\n  //                                 (feature.valence >\r\n  //                                   songAudioFeatures.valence * 0.8 &&\r\n  //                                   feature.valence < songAudioFeatures.valence * 1.2)\r\n  //                               );\r\n  //                             })\r\n  //                             .map(features => features.uri);\r\n  //                             //return similarSongs\r\n  //                         })\r\n  //                     })\r\n  //                 })\r\n  //             }))\r\n  //         }))\r\n\r\n  //       })\r\n  //       return Promise.all(promises).then(response => {\r\n  //         console.log('THE ONLY RESPONSE IM LOOKING FOR', response)\r\n  //       })\r\n  //     })\r\n  //   })\r\n\r\n  // };\r\n\r\n\r\nexport default {\r\n  getUserProfileInformation: getUserProfileInformation,\r\n  getUsersPlaylists: getUsersPlaylists,\r\n  searchForArtist: searchForArtist,\r\n  searchForSong: searchForSong,\r\n  getSimilarArtists: getSimilarArtists,\r\n  getArtistsTopSongs: getArtistsTopSongs,\r\n  createPlaylist: createPlaylist,\r\n  populatePlaylist: populatePlaylist,\r\n  getArtistsAlbums: getArtistsAlbums,\r\n  getAlbumsTracks: getAlbumsTracks,\r\n  getAudioFeatures: getAudioFeatures,\r\n  getAudioFeature: getAudioFeature,\r\n  getNumberOfTracksInPlaylist: getNumberOfTracksInPlaylist,\r\n  getPlaylistsArtists: getPlaylistsArtists,\r\n  getPlaylistsTracks: getPlaylistsTracks,\r\n  getMultipleSimilarArtists: getMultipleSimilarArtists,\r\n  createPlaylistFromPlaylist_ArtistBased:createPlaylistFromPlaylist_ArtistBased,\r\n  createPlaylistWithSimilarArtists:createPlaylistWithSimilarArtists,\r\n  createPlaylistWithSimilarSongs:createPlaylistWithSimilarSongs\r\n};\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    maxWidth: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n    borderRadius:\"3%\"\r\n  }\r\n}));\r\n\r\nconst LoadingModal = ({\r\n  open,\r\n  handleClose,\r\n  isPlaylistCreated,\r\n  isCloseAllowed\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n        open={open}\r\n        onClose={handleClose}\r\n        disableBackdropClick={isCloseAllowed}\r\n        disableEscapeKeyDown={isCloseAllowed}\r\n        style={{\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\"\r\n        }}\r\n      >\r\n        {isPlaylistCreated ? (\r\n          <div className={classes.paper} align=\"center\">\r\n            <h2>Playlist created</h2>\r\n            <p>(Click off this box to close it)</p>\r\n          </div>\r\n        ) : (\r\n          <div className={classes.paper}>\r\n            <h2 id=\"simple-modal-title\">Generating playlist</h2>\r\n            <div align=\"center\">\r\n              <CircularProgress />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingModal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport LoadingModal from \"./LoadingModal\"\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    maxWidth: 345\r\n  },\r\n  media: {\r\n    height: 140\r\n  }\r\n});\r\n\r\nconst MusicItem = ({ id, image, name, functionToExecute, isPlaylistCreated, setPlaylistCreated }) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [allowClose, setAllowClose] = useState(true)\r\n\r\n  useEffect(() => {\r\n    if(isPlaylistCreated) {\r\n      setAllowClose(false)\r\n    }\r\n  }, [isPlaylistCreated])\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    if (isPlaylistCreated) {\r\n      setPlaylistCreated(false)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid item align=\"center\">\r\n      <LoadingModal open={open} handleClose={handleClose} isPlaylistCreated={isPlaylistCreated} isCloseAllowed={allowClose} />\r\n      <Card className={classes.card} onClick={() => {functionToExecute(...id); handleOpen()}}>\r\n        \r\n        <CardActionArea>\r\n          <CardMedia className={classes.media} image={image} title={name} />\r\n          <CardContent>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              {name}\r\n            </Typography>\r\n          </CardContent>\r\n        </CardActionArea>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default MusicItem;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport discoveryService from \"../services/discoveryService\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst SearchForm = ({\r\n  searchLabel,\r\n  newSearch,\r\n  handleSearch,\r\n  header,\r\n  setValues,\r\n  type\r\n}) => {\r\n  let discoveryFunction = null;\r\n\r\n  if (type === \"song\") {\r\n    discoveryFunction = discoveryService.searchForSong;\r\n  } else {\r\n    discoveryFunction = discoveryService.searchForArtist;\r\n  }\r\n\r\n  const [searched, setSearched] = useState(false);\r\n\r\n  const toggleSearch = () => {\r\n    setSearched(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (header !== null && searched) {\r\n      discoveryFunction(newSearch, header, setValues, setSearched);\r\n    }\r\n  }, [newSearch, header, setValues, searched]);\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      spacing={2}\r\n      style={{ margin: \"0\", width: \"100%\" }}\r\n    >\r\n      <TextField\r\n        id=\"filled-basic\"\r\n        label={searchLabel}\r\n        margin=\"normal\"\r\n        variant=\"filled\"\r\n        value={newSearch}\r\n        onChange={handleSearch}\r\n        onKeyPress={ev => {\r\n          if (ev.key === \"Enter\") {\r\n            toggleSearch();\r\n          }\r\n        }}\r\n      />\r\n\r\n      <Button variant=\"contained\" onClick={() => toggleSearch()}>\r\n        search\r\n      </Button>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SearchForm;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport discoveryService from \"../services/discoveryService\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst PlaylistForm = ({\r\n  searchLabel,\r\n  newSearch,\r\n  handleSearch,\r\n  header,\r\n  setValues\r\n}) => {\r\n  let discoveryFunction = discoveryService.getUsersPlaylists;\r\n\r\n  useEffect(() => {\r\n    if (header !== null) {\r\n      discoveryFunction(header, setValues)\r\n    }\r\n  }, [newSearch, header, setValues]);\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      spacing={2}\r\n      style={{ margin: \"0\", width: \"100%\" }}\r\n    >\r\n      <TextField\r\n        id=\"filled-basic\"\r\n        label={searchLabel}\r\n        margin=\"normal\"\r\n        variant=\"filled\"\r\n        value={newSearch}\r\n        onChange={handleSearch}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default PlaylistForm;\r\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst MusicContainer = ({ musicItems }) => {\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      justify=\"center\"\r\n      alignItems=\"stretch\"\r\n      spacing={2}\r\n      style={{ minHeight: \"80vh\", margin: \"0\", width: \"100%\" }}\r\n    >\r\n      {musicItems}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default MusicContainer;\r\n","import React from \"react\";\r\nimport SearchForm from \"./SearchForm\";\r\nimport PlaylistForm from \"./PlaylistForm\"\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport MusicContainer from \"./MusicContainer\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  back_button: {\r\n    left: \"10%\"\r\n  }\r\n});\r\n\r\nconst SearchContainer = ({\r\n  isPageVisible,\r\n  togglePage,\r\n  toggleMainMenu,\r\n  searchLabel,\r\n  newSearch,\r\n  handleSearch,\r\n  header,\r\n  setValues,\r\n  type,\r\n  musicItems\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      {isPageVisible ? (\r\n        <div>\r\n          <IconButton\r\n            className={classes.back_button}\r\n            onClick={() => {\r\n              togglePage();\r\n              toggleMainMenu();\r\n            }}\r\n          >\r\n            <ArrowBackIcon fontSize=\"large\" />\r\n          </IconButton>\r\n\r\n\r\n          {type === \"playlist\" ? \r\n          <PlaylistForm\r\n          searchLabel={searchLabel}\r\n          newSearch={newSearch}\r\n          handleSearch={handleSearch}\r\n          header={header}\r\n          setValues={setValues}\r\n        />\r\n        :\r\n          <SearchForm\r\n            searchLabel={searchLabel}\r\n            newSearch={newSearch}\r\n            handleSearch={handleSearch}\r\n            header={header}\r\n            setValues={setValues}\r\n            type={type}\r\n          />\r\n          }\r\n          <MusicContainer musicItems={musicItems} />\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchContainer;\r\n","import React from \"react\";\r\nimport { makeStyles, ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Button from \"@material-ui/core/Button\"\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: { main: '#1FD662' },\r\n    },\r\n  });\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n      position: \"absolute\",\r\n      maxWidth: 400,\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: \"2px solid #000\",\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n      borderRadius:\"3%\"\r\n    }\r\n}));\r\n\r\nconst AuthModal = ({\r\n    open,\r\n    handleClose,\r\n    authFunction\r\n}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            disableBackdropClick={true}\r\n            disableEscapeKeyDown={true}\r\n            style={{\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\"\r\n            }}\r\n            >\r\n                <div className={classes.paper} align=\"center\">\r\n                    <h2>Click the button below to link your Spotify account</h2>\r\n                    <div align=\"center\">\r\n                        <ThemeProvider theme={theme}>\r\n                            <Button variant=\"contained\" color=\"primary\" onClick={()=>authFunction()}> \r\n                                Link Spotify\r\n                            </Button>\r\n                        </ThemeProvider>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AuthModal;","import React, { useState, useEffect } from \"react\";\r\nimport discoveryService from \"./services/discoveryService\";\r\nimport MusicItem from \"./components/MusicItem\";\r\nimport SearchContainer from \"./components/SearchContainer\";\r\nimport AuthModal from \"./components/AuthModal\"\r\nimport { authenticateUser, getAuthorizationHeader } from \"./services/authService\"\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst App = () => {\r\n  const [newPlaylistSearch, setNewPlaylistSearch] = useState(\"\")\r\n  const [newArtistSearch, setNewArtistSearch] = useState(\"\");\r\n  const [newSongSearch, setNewSongSearch] = useState(\"\");\r\n\r\n  const [artists, setArtists] = useState([]);\r\n  const [songs, setSongs] = useState([]);\r\n  const [userPlaylists, setUserPlaylists] = useState([]);\r\n\r\n  const [playlistCreated, setPlaylistCreated] = useState(false);\r\n\r\n  const [header, setHeader] = useState(null);\r\n\r\n  const [isMainMenuVisible, setMainMenuVisibility] = useState(true);\r\n  const [isArtistPageVisible, setArtistPageVisibility] = useState(false);\r\n  const [isSongPageVisible, setSongPageVisibility] = useState(false);\r\n  const [isPlaylistPageVisible, setPlaylistPageVisibility] = useState(false);\r\n  const [isAuthModalVisible, setAuthOpenVisibility] = useState(true);\r\n\r\n  const handlePlaylistSearch = event => {\r\n    setNewPlaylistSearch(event.target.value)\r\n  }\r\n\r\n  const handleArtistSearch = event => {\r\n    setNewArtistSearch(event.target.value);\r\n  };\r\n\r\n  const handleSongSearch = event => {\r\n    setNewSongSearch(event.target.value);\r\n  };\r\n\r\n  const toggleMainMenu = () => {\r\n    setMainMenuVisibility(!isMainMenuVisible);\r\n  };\r\n\r\n  const togglePlaylistPage = () => {\r\n    setPlaylistPageVisibility(!isPlaylistPageVisible);\r\n  };\r\n\r\n  const toggleArtistPage = () => {\r\n    setArtistPageVisibility(!isArtistPageVisible);\r\n  };\r\n\r\n  const toggleSongPage = () => {\r\n    setSongPageVisibility(!isSongPageVisible);\r\n  };\r\n\r\n  const handleAuthClose = () => {\r\n    setAuthOpenVisibility(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getAuthorizationHeader(setHeader);\r\n    if(window.location.href !== \"https://alexndesousa.github.io/simple-discovery/\") {\r\n        handleAuthClose()\r\n    }\r\n  }, []);\r\n\r\n  const createPlaylistFromPlaylist_Artist = id => {\r\n    discoveryService.createPlaylistFromPlaylist_ArtistBased(id, header, setPlaylistCreated)\r\n  }\r\n\r\n  const createPlaylistWithSimilarArtists = id => {\r\n    discoveryService.createPlaylistWithSimilarArtists(id, header, setPlaylistCreated)\r\n  }\r\n\r\n  const createPlaylistWithSimilarSongs = (id, songID) => {\r\n    discoveryService.createPlaylistWithSimilarSongs(id, songID, header, setPlaylistCreated)\r\n  }\r\n\r\n  const listOfPlaylists = userPlaylists.filter(playlist => {\r\n    return playlist.name.toUpperCase().includes(newPlaylistSearch.toUpperCase())\r\n  }).map(info => (\r\n    <MusicItem\r\n      key={info.id}\r\n      id={[info.id]}\r\n      image={info.image}\r\n      name={info.name}\r\n      functionToExecute={createPlaylistFromPlaylist_Artist}\r\n      isPlaylistCreated={playlistCreated}\r\n      setPlaylistCreated={setPlaylistCreated}\r\n    />\r\n  ))\r\n\r\n  const listOfArtists = artists.map(info => (\r\n    <MusicItem\r\n      key={info.id}\r\n      id={[info.id]}\r\n      image={info.image}\r\n      name={info.name}\r\n      functionToExecute={createPlaylistWithSimilarArtists}\r\n      isPlaylistCreated={playlistCreated}\r\n      setPlaylistCreated={setPlaylistCreated}\r\n    />\r\n  ));\r\n\r\n  const listOfSongs = songs.map(info => (\r\n    <MusicItem\r\n      key={info.id}\r\n      id={[info.artist_id, info.id]}\r\n      image={info.image}\r\n      name={`${info.name} - ${info.artist}`}\r\n      functionToExecute={createPlaylistWithSimilarSongs}\r\n      isPlaylistCreated={playlistCreated}\r\n      setPlaylistCreated={setPlaylistCreated}\r\n    />\r\n  ));\r\n\r\n  const MainMenu = (\r\n    <>\r\n      {isMainMenuVisible ? (\r\n        <Grid\r\n          container\r\n          direction=\"column\"\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n          spacing={2}\r\n          style={{ minHeight: \"80vh\", margin: \"0\", width: \"100%\" }}\r\n        >\r\n          <h2>Select an option from the list below</h2>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"large\"\r\n              onClick={() => {\r\n                togglePlaylistPage();\r\n                toggleMainMenu();\r\n              }}\r\n            >\r\n              import playlist\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"large\"\r\n              onClick={() => {\r\n                toggleArtistPage();\r\n                toggleMainMenu();\r\n              }}\r\n            >\r\n              search artist\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"large\"\r\n              onClick={() => {\r\n                toggleSongPage();\r\n                toggleMainMenu();\r\n              }}\r\n            >\r\n              search song\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      ) : null}\r\n    </>\r\n  );\r\n\r\n  const PlaylistPage = (\r\n    <>\r\n      <SearchContainer\r\n        isPageVisible={isPlaylistPageVisible}\r\n        togglePage={togglePlaylistPage}\r\n        toggleMainMenu={toggleMainMenu}\r\n        searchLabel=\"Playlist name\"\r\n        newSearch={newPlaylistSearch}\r\n        handleSearch={handlePlaylistSearch}\r\n        header={header}\r\n        setValues={setUserPlaylists}\r\n        type=\"playlist\"\r\n        musicItems={listOfPlaylists}\r\n      />\r\n    </>\r\n  )\r\n\r\n  const ArtistPage = (\r\n    <div>\r\n      <SearchContainer\r\n        isPageVisible={isArtistPageVisible}\r\n        togglePage={toggleArtistPage}\r\n        toggleMainMenu={toggleMainMenu}\r\n        searchLabel=\"Artist name\"\r\n        newSearch={newArtistSearch}\r\n        handleSearch={handleArtistSearch}\r\n        header={header}\r\n        setValues={setArtists}\r\n        type=\"artist\"\r\n        musicItems={listOfArtists}\r\n      />\r\n    </div>\r\n  )\r\n\r\n  const SongPage = (\r\n    <div>\r\n      <SearchContainer\r\n        isPageVisible={isSongPageVisible}\r\n        togglePage={toggleSongPage}\r\n        toggleMainMenu={toggleMainMenu}\r\n        searchLabel=\"Song name\"\r\n        newSearch={newSongSearch}\r\n        handleSearch={handleSongSearch}\r\n        header={header}\r\n        setValues={setSongs}\r\n        type=\"song\"\r\n        musicItems={listOfSongs}\r\n      />\r\n    </div>\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <AuthModal open={isAuthModalVisible} handleClose={handleAuthClose} authFunction={authenticateUser}/>\r\n      {/* {isLoginVisible ? (\r\n        <button onClick={() => authenticateUser()}>authenticate</button>\r\n      ) : null} */}\r\n\r\n      {MainMenu}\r\n      {PlaylistPage}\r\n      {ArtistPage}\r\n      {SongPage}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}