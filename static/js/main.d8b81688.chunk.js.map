{"version":3,"sources":["utils/utils.js","services/discoveryService.js","components/UserInfo.js","components/LoadingModal.js","components/MusicItem.js","components/MusicContainer.js","components/SearchForm.js","components/SearchContainer.js","App.js","index.js","assets/placeholder.png"],"names":["chunkArray","array","size","newArray","i","length","push","slice","baseUrl","getSimilarArtists","id","header","endpoint","axios","get","headers","then","response","data","artists","map","info","setUserData","formattedData","username","display_name","email","country","setUserPlaylists","console","log","items","name","image","images","url","query","setArtists","setArtistSearched","encodeURIComponent","formattedArtists","undefined","placeholderImage","catch","error","setSongs","setSongSearched","formattedSongs","tracks","artist","artist_id","album","setAllRelatedSongs","allSongs","limiter","Bottleneck","maxConcurrent","minTime","promises","schedule","songURIs","uri","concat","Promise","all","setCreatedPlaylistID","post","description","playlistID","songBundle","uris","artistIDs","albumIDs","allAlbumIDs","artistID","artistAlbums","item","allTracks","albumBundle","toString","trackIdsForThisBundle","albums","flat","audioFeatures","tracksBundle","audio_features","trackID","total","amountOfTracks","allArtists","allPromises","offset","track","filter","index","indexOf","allArtistIDs","allArtistIDsNoDuplicates","UserInfo","useEffect","discoveryService","useStyles","makeStyles","theme","paper","position","maxWidth","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","LoadingModal","open","handleClose","isPlaylistCreated","classes","Modal","aria-labelledby","aria-describedby","onClose","style","display","alignItems","justifyContent","className","align","CircularProgress","card","media","height","MusicItem","functionToExecute","React","useState","setOpen","Grid","Card","onClick","CardActionArea","CardMedia","title","CardContent","Typography","variant","component","MusicContainer","musicItems","container","direction","justify","minHeight","margin","width","SearchForm","searchLabel","newSearch","handleSearch","setValues","type","discoveryFunction","searched","setSearched","toggleSearch","TextField","label","value","onChange","onKeyPress","ev","key","Button","back_button","left","SearchContainer","isPageVisible","togglePage","toggleMainMenu","IconButton","fontSize","App","newArtistSearch","setNewArtistSearch","newSongSearch","setNewSongSearch","songs","userPlaylists","setCreatedPlaylistId","playlistCreated","setPlaylistCreated","setHeader","setState","isLoginVisible","setLoginVisible","isMainMenuVisible","setMainMenuVisibility","isArtistPageVisible","setArtistPageVisibility","isSongPageVisible","setSongPageVisibility","isPlaylistPageVisible","setPlaylistPageVisibility","togglePlaylistPage","toggleArtistPage","toggleSongPage","authenticateUser","state","text","possible","charAt","Math","floor","random","generateRandomString","window","location","getAuthorizationHeader","authInfo","pairs","hash","substring","split","pair","decodeURIComponent","decodeURLParameters","newHeader","Authorization","token_type","access_token","root","flexgrow","createPlaylistFromPlaylist_Artist","numberOfTracks","relatedArtists","playlist_id","createPlaylistWithSimilarArtists","createPlaylistWithSimilarSongs","songID","allAlbums","allAudioFeatures","songAudioFeatures","similarSongs","feature","tempo","energy","valence","features","listOfPlaylists","listOfArtists","listOfSongs","MainMenu","PlaylistPage","event","target","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.d8b81688.chunk.js","sourcesContent":["const chunkArray = (array, size) => {\r\n  let newArray = [];\r\n  for (let i = 0; i < array.length; i += size) {\r\n    newArray.push(array.slice(i, i + size));\r\n  }\r\n  return newArray;\r\n};\r\n\r\nconst generateRandomString = length => {\r\n  let text = \"\";\r\n  const possible =\r\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\n  while (text.length <= length) {\r\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n  }\r\n\r\n  return text;\r\n};\r\n\r\nexport { chunkArray, generateRandomString };\r\n","import axios from \"axios\";\r\nimport { chunkArray } from \"../utils/utils\";\r\nimport Bottleneck from \"bottleneck\";\r\nimport placeholderImage from \"../assets/placeholder.png\";\r\n\r\nconst baseUrl = \"https://api.spotify.com/v1\";\r\n\r\nconst getUserProfileInformation = (header, setUserData) => {\r\n  return axios.get(baseUrl + \"/me\", { headers: header }).then(response => {\r\n    const formattedData = {\r\n      username: response.data.display_name,\r\n      id: response.data.id,\r\n      email: response.data.email,\r\n      country: response.country\r\n    };\r\n    setUserData(formattedData);\r\n  });\r\n};\r\n\r\nconst getUsersPlaylists = (header, setUserPlaylists) => {\r\n  return axios\r\n    .get(baseUrl + \"/me/playlists?limit=50\", { headers: header })\r\n    .then(response => {\r\n      console.log(\"response from playlists\", response.data);\r\n      const formattedData = response.data.items.map(info => {\r\n        let formatted = {\r\n          name: info.name,\r\n          id: info.id,\r\n          image: info.images[0].url\r\n        };\r\n        return formatted;\r\n      });\r\n      setUserPlaylists(formattedData);\r\n      console.log(\"formatted data\", formattedData);\r\n    });\r\n};\r\n\r\nconst searchForArtist = (query, header, setArtists, setArtistSearched) => {\r\n  const type = \"artist\";\r\n  const endpoint =\r\n    baseUrl +\r\n    \"/search?q=\" +\r\n    encodeURIComponent(query) +\r\n    \"&type=\" +\r\n    encodeURIComponent(type);\r\n  return axios\r\n    .get(endpoint, { headers: header })\r\n    .then(response => {\r\n      const formattedArtists = response.data.artists.items.map(info => {\r\n        let pair = {\r\n          name: info.name,\r\n          id: info.id,\r\n          image:\r\n            info.images[0] !== undefined ? info.images[0].url : placeholderImage\r\n        };\r\n        return pair;\r\n      });\r\n      setArtists(formattedArtists);\r\n      setArtistSearched(false);\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    });\r\n};\r\n\r\nconst searchForSong = (query, header, setSongs, setSongSearched) => {\r\n  const type = \"track\";\r\n  const endpoint =\r\n    baseUrl +\r\n    \"/search?q=\" +\r\n    encodeURIComponent(query) +\r\n    \"&type=\" +\r\n    encodeURIComponent(type);\r\n  return axios\r\n    .get(endpoint, { headers: header })\r\n    .then(response => {\r\n      console.log(\"SONG SEARCH RESPONSE\", response);\r\n      const formattedSongs = response.data.tracks.items.map(info => {\r\n        let pair = {\r\n          name: info.name,\r\n          id: info.id,\r\n          artist: info.artists[0].name,\r\n          artist_id: info.artists[0].id,\r\n          image: info.album.images[0].url\r\n        };\r\n        return pair;\r\n      });\r\n      setSongs(formattedSongs);\r\n      setSongSearched(false);\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    });\r\n};\r\n\r\nconst getSimilarArtists = (id, header) => {\r\n  const endpoint = baseUrl + \"/artists/\" + id + \"/related-artists\";\r\n  return axios.get(endpoint, { headers: header }).then(response => {\r\n    return response.data.artists.map(info => info.id);\r\n  });\r\n};\r\n\r\nconst getMultipleSimilarArtists = (artistIDs, header) => {\r\n  let allArtistIDs = [];\r\n  const promises = artistIDs.map(id =>\r\n    getSimilarArtists(id, header).then(response => {\r\n      allArtistIDs = allArtistIDs.concat(response);\r\n      return response;\r\n    })\r\n  );\r\n  return Promise.all(promises).then(() => {\r\n    const allArtistIDsNoDuplicates = allArtistIDs.filter(\r\n      (item, index, array) => array.indexOf(item) === index\r\n    );\r\n    console.log(\r\n      \"response from the promises for multiple similar artists NO DUPLICATES\",\r\n      allArtistIDsNoDuplicates\r\n    );\r\n    return allArtistIDsNoDuplicates;\r\n  });\r\n};\r\n\r\nconst getArtistsTopSongs = (artists, header, setAllRelatedSongs) => {\r\n  let allSongs = [];\r\n  const limiter = new Bottleneck({\r\n    maxConcurrent: 4,\r\n    minTime: 500\r\n  });\r\n  const endpoint = baseUrl + \"/artists/\";\r\n  const promises = artists.map(artist => {\r\n    return limiter.schedule(() =>\r\n      axios\r\n        .get(endpoint + artist + \"/top-tracks?country=GB\", { headers: header })\r\n        .then(response => {\r\n          const songURIs = response.data.tracks.map(info => info.uri);\r\n          //console.log('made a request', response, songURIs)\r\n          allSongs = allSongs.concat(songURIs);\r\n        })\r\n    );\r\n  });\r\n  return Promise.all(promises).then(() => {\r\n    //console.log(\"allSongs\", allSongs);\r\n    setAllRelatedSongs(allSongs);\r\n    return allSongs;\r\n  });\r\n};\r\n\r\nconst createPlaylist = (header, setCreatedPlaylistID) => {\r\n  //MUST NOT FORGET TO CHANGE USER ID\r\n  const endpoint = baseUrl + \"/users/\" + \"alex31734\" + \"/playlists\";\r\n  header[\"Content-Type\"] = \"application/json\";\r\n  const body = {\r\n    name: \"Simple discovery test\",\r\n    description: \"just a simple test\"\r\n  };\r\n  return axios.post(endpoint, body, { headers: header }).then(response => {\r\n    setCreatedPlaylistID(response.data.id);\r\n    return response.data.id;\r\n  });\r\n};\r\n\r\nconst populatePlaylist = (allSongs, playlistID, header) => {\r\n  console.log(\"final allSongs\", allSongs);\r\n  const promises = chunkArray(allSongs, 100).map(songBundle => {\r\n    console.log(\"songBundle\", songBundle);\r\n    return axios\r\n      .post(\r\n        baseUrl + \"/playlists/\" + playlistID + \"/tracks\",\r\n        { uris: songBundle },\r\n        { headers: header }\r\n      )\r\n      .then(response => {\r\n        return response;\r\n      });\r\n  });\r\n  return Promise.all(promises);\r\n};\r\n\r\n//worth noting that i can increase the minimum amount of albums it finds for each artist\r\n//default is 20, up to a maximum of 50\r\nconst getArtistsAlbums = (artistIDs, header) => {\r\n  console.log(\"artistIDs\", artistIDs);\r\n  let albumIDs = [];\r\n  let allAlbumIDs = [];\r\n  // const limiter = new Bottleneck({\r\n  //   maxConcurrent:5,\r\n  //   minTime:1000\r\n  // })\r\n  const promises = artistIDs.map(artistID => {\r\n    return axios\r\n      .get(baseUrl + \"/artists/\" + artistID + \"/albums\", { headers: header })\r\n      .then(response => {\r\n        const artistAlbums = response.data.items.map(item => item.id);\r\n        if (albumIDs.length + artistAlbums.length <= 20) {\r\n          albumIDs = albumIDs.concat(artistAlbums);\r\n        } else {\r\n          allAlbumIDs.push(albumIDs);\r\n          albumIDs = [].concat(artistAlbums);\r\n        }\r\n        return response;\r\n      });\r\n  });\r\n  return Promise.all(promises).then(response => {\r\n    allAlbumIDs.push(albumIDs);\r\n    console.log(\"response from getting all artists albums\", response);\r\n    console.log(\"getting all artists albums\", allAlbumIDs);\r\n    return allAlbumIDs;\r\n  });\r\n};\r\n\r\nconst getAlbumsTracks = (albumIDs, header) => {\r\n  let allTracks = [];\r\n  const promises = albumIDs.map(albumBundle => {\r\n    return axios\r\n      .get(baseUrl + \"/albums/?ids=\" + albumBundle.toString(), {\r\n        headers: header\r\n      })\r\n      .then(response => {\r\n        //console.log('response from getting tracks', response)\r\n        const trackIdsForThisBundle = response.data.albums.map(album =>\r\n          album.tracks.items.map(item => item.id)\r\n        );\r\n        //console.log('track ids for this bundle ', trackIdsForThisBundle)\r\n        allTracks = allTracks.concat(trackIdsForThisBundle.flat());\r\n        return response;\r\n      });\r\n  });\r\n\r\n  return Promise.all(promises).then(response => {\r\n    console.log(\"response form getting all trakcs\", response);\r\n    console.log(\"contents of allTracks\", allTracks);\r\n    console.log(\"chunked array \", chunkArray(allTracks, 100));\r\n    return chunkArray(allTracks, 100);\r\n  });\r\n};\r\n\r\nconst getAudioFeatures = (allTracks, header) => {\r\n  let audioFeatures = [];\r\n  const promises = allTracks.map(tracksBundle => {\r\n    return axios\r\n      .get(baseUrl + \"/audio-features/?ids=\" + tracksBundle.toString(), {\r\n        headers: header\r\n      })\r\n      .then(response => {\r\n        //console.log('response from audiofeatures ', response)\r\n        //console.log('specific audiofeatures ', response.data.audio_features)\r\n        audioFeatures = audioFeatures.concat(response.data.audio_features);\r\n        return response;\r\n      });\r\n  });\r\n\r\n  return Promise.all(promises).then(response => {\r\n    console.log(\"response from all audio features \", response);\r\n    console.log(\"final audio features: \", audioFeatures);\r\n    //const sortedFeatures = response.data.audio_features.map(bundle => bundle.audio_features)\r\n    //console.log('sortedFeatures', sortedFeatures)\r\n    return audioFeatures;\r\n  });\r\n};\r\n\r\nconst getAudioFeature = (trackID, header) => {\r\n  return axios\r\n    .get(baseUrl + \"/audio-features/\" + encodeURIComponent(trackID), {\r\n      headers: header\r\n    })\r\n    .then(response => {\r\n      console.log(\"response for getting single audioFeature\", response);\r\n      console.log(\"response for getting single audioFeature\", response.data);\r\n      return response.data;\r\n    });\r\n};\r\n\r\nconst getNumberOfTracksInPlaylist = (playlistID, header) => {\r\n  return axios\r\n    .get(baseUrl + \"/playlists/\" + playlistID, { headers: header })\r\n    .then(response => {\r\n      console.log(\"number of tracks\", response.data.tracks.total);\r\n      return response.data.tracks.total;\r\n    });\r\n};\r\n\r\nconst getPlaylistsArtists = (playlistID, amountOfTracks, header) => {\r\n  const maxTracksPerPage = 100;\r\n  let allArtists = [];\r\n  let allPromises = [];\r\n\r\n  for (let offset = 0; offset < amountOfTracks; offset += maxTracksPerPage) {\r\n    allPromises.push(\r\n      axios\r\n        .get(\r\n          baseUrl + \"/playlists/\" + playlistID + \"/tracks?offset=\" + offset,\r\n          { headers: header }\r\n        )\r\n        .then(response => {\r\n          //maps to the artist id and removes duplicates\r\n          const artistIDs = response.data.items\r\n            .map(item => item.track.artists[0].id)\r\n            .filter((item, index, array) => array.indexOf(item) === index);\r\n          allArtists = allArtists.concat(artistIDs);\r\n          return response;\r\n        })\r\n    );\r\n  }\r\n\r\n  return Promise.all(allPromises).then(response => {\r\n    console.log(\"response from all playlist tracks getting\", response);\r\n    console.log(\"all playlist track getting \", allArtists);\r\n    return allArtists;\r\n  });\r\n};\r\n\r\nconst getPlaylistsTracks = (playlistID, amountOfTracks, header) => {\r\n  const maxTracksPerPage = 100;\r\n  let allTracks = [];\r\n  let allPromises = [];\r\n\r\n  for (let offset = 0; offset < amountOfTracks; offset += maxTracksPerPage) {\r\n    allPromises.push(\r\n      axios\r\n        .get(\r\n          baseUrl + \"/playlists/\" + playlistID + \"/tracks?offset=\" + offset,\r\n          { headers: header }\r\n        )\r\n        .then(response => {\r\n          //maps to the artist id and removes duplicates\r\n          console.log(\"RESPONSE FROM GETPLAYLISTTRACKS\", response);\r\n          const trackIDs = response.data.items\r\n            .map(item => {\r\n              let obj = {\r\n                songID: item.track.id,\r\n                id: item.track.artists[0].id\r\n              };\r\n              return obj;\r\n            })\r\n            .filter((item, index, array) => array.indexOf(item) === index);\r\n          allTracks = allTracks.concat(trackIDs);\r\n          return response;\r\n        })\r\n    );\r\n  }\r\n\r\n  return Promise.all(allPromises).then(response => {\r\n    console.log(\"response from all playlist tracks getting\", response);\r\n    console.log(\"all playlist track getting \", allTracks);\r\n    return allTracks;\r\n  });\r\n};\r\n\r\nexport default {\r\n  getUserProfileInformation: getUserProfileInformation,\r\n  getUsersPlaylists: getUsersPlaylists,\r\n  searchForArtist: searchForArtist,\r\n  searchForSong: searchForSong,\r\n  getSimilarArtists: getSimilarArtists,\r\n  getArtistsTopSongs: getArtistsTopSongs,\r\n  createPlaylist: createPlaylist,\r\n  populatePlaylist: populatePlaylist,\r\n  getArtistsAlbums: getArtistsAlbums,\r\n  getAlbumsTracks: getAlbumsTracks,\r\n  getAudioFeatures: getAudioFeatures,\r\n  getAudioFeature: getAudioFeature,\r\n  getNumberOfTracksInPlaylist: getNumberOfTracksInPlaylist,\r\n  getPlaylistsArtists: getPlaylistsArtists,\r\n  getPlaylistsTracks: getPlaylistsTracks,\r\n  getMultipleSimilarArtists: getMultipleSimilarArtists\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport discoveryService from \"../services/discoveryService\";\r\n\r\nconst UserInfo = ({ header, setUserData, setUserPlaylists }) => {\r\n  useEffect(() => {\r\n    if (header !== null) {\r\n      discoveryService\r\n        .getUserProfileInformation(header, setUserData)\r\n        .then(() => {\r\n          discoveryService.getUsersPlaylists(header, setUserPlaylists);\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }, [header, setUserPlaylists, setUserData]);\r\n\r\n  return <div>your profile information:</div>;\r\n};\r\n\r\nexport default UserInfo;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    maxWidth: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3)\r\n  }\r\n}));\r\n\r\nconst LoadingModal = ({ open, handleClose, isPlaylistCreated }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n        open={open}\r\n        onClose={handleClose}\r\n        style={{\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\"\r\n        }}\r\n      >\r\n        {isPlaylistCreated ? (\r\n          <div className={classes.paper}>\r\n          <h2>Playlist created</h2>\r\n          </div>\r\n        ) : (\r\n          <div className={classes.paper}>\r\n\r\n\r\n            <h2 id=\"simple-modal-title\">Generating playlist</h2>\r\n            <div align=\"center\">\r\n              <CircularProgress />\r\n            </div>\r\n            \r\n          </div>\r\n        )}\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingModal;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport LoadingModal from \"./LoadingModal\"\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    maxWidth: 345\r\n  },\r\n  media: {\r\n    height: 140\r\n  }\r\n});\r\n\r\nconst MusicItem = ({ id, image, name, functionToExecute, isPlaylistCreated }) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Grid item align=\"center\">\r\n      <Card className={classes.card} onClick={() => {functionToExecute(...id); handleOpen()}}>\r\n        <LoadingModal open={open} handleClose={handleClose} isPlaylistCreated={isPlaylistCreated} />\r\n        <CardActionArea>\r\n          <CardMedia className={classes.media} image={image} title={name} />\r\n          <CardContent>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              {name}\r\n            </Typography>\r\n          </CardContent>\r\n        </CardActionArea>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default MusicItem;\r\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst MusicContainer = ({ musicItems }) => {\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      justify=\"center\"\r\n      alignItems=\"stretch\"\r\n      spacing={2}\r\n      style={{ minHeight: \"80vh\", margin: \"0\", width: \"100%\" }}\r\n    >\r\n      {musicItems}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default MusicContainer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport discoveryService from \"../services/discoveryService\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst SearchForm = ({\r\n  searchLabel,\r\n  newSearch,\r\n  handleSearch,\r\n  header,\r\n  setValues,\r\n  type\r\n}) => {\r\n  let discoveryFunction = null;\r\n\r\n  if (type === \"song\") {\r\n    discoveryFunction = discoveryService.searchForSong;\r\n  } else {\r\n    discoveryFunction = discoveryService.searchForArtist;\r\n  }\r\n\r\n  const [searched, setSearched] = useState(false);\r\n\r\n  const toggleSearch = () => {\r\n    setSearched(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (header !== null && searched) {\r\n      discoveryFunction(newSearch, header, setValues, setSearched);\r\n    }\r\n  }, [newSearch, header, setValues, searched]);\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      spacing={2}\r\n      style={{ margin: \"0\", width: \"100%\" }}\r\n    >\r\n      <TextField\r\n        id=\"filled-basic\"\r\n        label={searchLabel}\r\n        margin=\"normal\"\r\n        variant=\"filled\"\r\n        value={newSearch}\r\n        onChange={handleSearch}\r\n        onKeyPress={ev => {\r\n          if (ev.key === \"Enter\") {\r\n            toggleSearch();\r\n          }\r\n        }}\r\n      />\r\n\r\n      <Button variant=\"contained\" onClick={() => toggleSearch()}>\r\n        search\r\n      </Button>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SearchForm;\r\n","import React from \"react\";\r\nimport SearchForm from \"./SearchForm\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport MusicContainer from \"./MusicContainer\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  back_button: {\r\n    left: \"10%\"\r\n  }\r\n});\r\n\r\nconst SearchContainer = ({\r\n  isPageVisible,\r\n  togglePage,\r\n  toggleMainMenu,\r\n  searchLabel,\r\n  newSearch,\r\n  handleSearch,\r\n  header,\r\n  setValues,\r\n  type,\r\n  musicItems\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      {isPageVisible ? (\r\n        <div>\r\n          <IconButton\r\n            className={classes.back_button}\r\n            onClick={() => {\r\n              togglePage();\r\n              toggleMainMenu();\r\n            }}\r\n          >\r\n            <ArrowBackIcon fontSize=\"large\" />\r\n          </IconButton>\r\n\r\n          <SearchForm\r\n            searchLabel={searchLabel}\r\n            newSearch={newSearch}\r\n            handleSearch={handleSearch}\r\n            header={header}\r\n            setValues={setValues}\r\n            type={type}\r\n          />\r\n          <MusicContainer musicItems={musicItems} />\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchContainer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport UserInfo from \"./components/UserInfo\";\r\nimport discoveryService from \"./services/discoveryService\";\r\nimport MusicItem from \"./components/MusicItem\";\r\nimport MusicContainer from \"./components/MusicContainer\";\r\nimport SearchContainer from \"./components/SearchContainer\";\r\nimport { generateRandomString } from \"./utils/utils\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\n\r\n//hash parameters will get the parameters in the url\r\n//need to figureo ut how to get them after a redirect\r\n\r\nconst App = () => {\r\n  const [newArtistSearch, setNewArtistSearch] = useState(\"\");\r\n  const [newSongSearch, setNewSongSearch] = useState(\"\");\r\n\r\n  const [artists, setArtists] = useState([]);\r\n  const [songs, setSongs] = useState([]);\r\n  const [userData, setUserData] = useState([]);\r\n  const [userPlaylists, setUserPlaylists] = useState([]);\r\n\r\n  const [createdPlaylistId, setCreatedPlaylistId] = useState(\"\");\r\n  const [allRelatedSongs, setAllRelatedSongs] = useState([]);\r\n  const [playlistCreated, setPlaylistCreated] = useState(false)\r\n\r\n  const [header, setHeader] = useState(null);\r\n  const [state, setState] = useState(\"\");\r\n\r\n  const [isLoginVisible, setLoginVisible] = useState(true);\r\n  const [isMainMenuVisible, setMainMenuVisibility] = useState(true);\r\n  const [isArtistPageVisible, setArtistPageVisibility] = useState(false);\r\n  const [isSongPageVisible, setSongPageVisibility] = useState(false);\r\n  const [isPlaylistPageVisible, setPlaylistPageVisibility] = useState(false);\r\n\r\n  const handleArtistSearch = event => {\r\n    setNewArtistSearch(event.target.value);\r\n  };\r\n\r\n  const handleSongSearch = event => {\r\n    setNewSongSearch(event.target.value);\r\n  };\r\n\r\n  const toggleMainMenu = () => {\r\n    setMainMenuVisibility(!isMainMenuVisible);\r\n  };\r\n\r\n  const togglePlaylistPage = () => {\r\n    setPlaylistPageVisibility(!isPlaylistPageVisible);\r\n  };\r\n\r\n  const toggleArtistPage = () => {\r\n    setArtistPageVisibility(!isArtistPageVisible);\r\n  };\r\n\r\n  const toggleSongPage = () => {\r\n    setSongPageVisibility(!isSongPageVisible);\r\n  };\r\n\r\n  //redirects the user to spotify so they can authenticate themselves.\r\n  //they are then sent back to the redirect uri (in this case localhost)\r\n  const authenticateUser = () => {\r\n    const client_id = \"a4e259d0257745afb6d9bc995d65808d\";\r\n    const redirect_uri = \"http://localhost:3000/\";\r\n    const scope =\r\n      \"user-top-read user-read-private user-read-email playlist-modify-public playlist-read-private\";\r\n\r\n    //whenever I make an api call, ensure that the state is the same as this one\r\n    const state = generateRandomString(16);\r\n    const url =\r\n      \"https://accounts.spotify.com/authorize?response_type=token\" +\r\n      \"&client_id=\" +\r\n      encodeURIComponent(client_id) +\r\n      \"&scope=\" +\r\n      encodeURIComponent(scope) +\r\n      \"&redirect_uri=\" +\r\n      encodeURIComponent(redirect_uri) +\r\n      \"&state=\" +\r\n      encodeURIComponent(state);\r\n    setState(state);\r\n    setLoginVisible(false);\r\n    window.location = url;\r\n  };\r\n\r\n  //I should merge the next two functions into one, it seems unecessary that I have to press\r\n  //the get data button, it should just work once the user is authenticated\r\n\r\n  //grabs the url parameters and puts them into an object (then returns it)\r\n  const decodeURLParameters = () => {\r\n    const queryString = window.location.hash.substring(1);\r\n    let query = {};\r\n    let pairs = queryString.split(\"&\");\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      let pair = pairs[i].split(\"=\");\r\n      query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\r\n    }\r\n    return query;\r\n  };\r\n  //returns an object with all the information that i need from the url\r\n  const getAuthorizationHeader = () => {\r\n    const authInfo = decodeURLParameters();\r\n    const newHeader = {\r\n      Authorization: \" \" + authInfo.token_type + \" \" + authInfo.access_token\r\n    };\r\n    setHeader(newHeader);\r\n  };\r\n\r\n  //i also wanna check the url here. If it contains the access_token, get rid of the authenticate\r\n  //this can be done with the same method from earlier where it just extracted the token from the url params\r\n  useEffect(() => {\r\n    console.log(\"hello from the useEffect thingy mabob\");\r\n    getAuthorizationHeader();\r\n\r\n    //something like below could work, but it isnt exactly the most optimal way of doing it.\r\n    //what happens if a user puts something after the forward slash, theres no way for them\r\n    //to know what went wrong\r\n\r\n    // if(window.location !== \"http://localhost:3000\") {\r\n    //     console.log('window location', window.location)\r\n    //     setLoginVisible(false)\r\n    // }\r\n  }, []);\r\n\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      flexgrow: 1\r\n    },\r\n    card: {\r\n      maxWidth: 345\r\n    },\r\n    media: {\r\n      height: 140\r\n    },\r\n    back_button: {\r\n      left: \"10%\"\r\n    }\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  const createPlaylistFromPlaylist_Artist = id => {\r\n    discoveryService\r\n      .getNumberOfTracksInPlaylist(id, header)\r\n      .then(numberOfTracks => {\r\n        discoveryService\r\n          .getPlaylistsArtists(id, numberOfTracks, header)\r\n          .then(artistIDs => {\r\n            console.log(\"artistIDs \", artistIDs);\r\n            discoveryService\r\n              .getMultipleSimilarArtists(artistIDs, header)\r\n              .then(relatedArtists => {\r\n                discoveryService\r\n                  .getArtistsTopSongs(\r\n                    relatedArtists,\r\n                    header,\r\n                    setAllRelatedSongs\r\n                  )\r\n                  .then(allSongs => {\r\n                    discoveryService\r\n                      .createPlaylist(header, setCreatedPlaylistId)\r\n                      .then(playlist_id => {\r\n                        discoveryService.populatePlaylist(\r\n                          allSongs,\r\n                          playlist_id,\r\n                          header\r\n                        ).then(response => {\r\n                          console.log('playlist created', response)\r\n                          setPlaylistCreated(true)\r\n                        })\r\n                      });\r\n                  });\r\n              });\r\n          });\r\n      });\r\n  };\r\n\r\n  //NEED TO PRESENT THE USER WITH A BUTTON LINKING TO THEIR NEWLY CREATED PLAYLIST\r\n\r\n  //move this whole thing into its own component then wrap the axios call in an effect hook\r\n  const createPlaylistWithSimilarArtists = id => {\r\n    discoveryService.getSimilarArtists(id, header).then(relatedArtists => {\r\n      discoveryService\r\n        .getArtistsTopSongs(relatedArtists, header, setAllRelatedSongs)\r\n        .then(allSongs => {\r\n          discoveryService\r\n            .createPlaylist(header, setCreatedPlaylistId)\r\n            .then(playlist_id => {\r\n              discoveryService.populatePlaylist(allSongs, playlist_id, header).then(response => {\r\n                console.log('playlist created', response)\r\n                setPlaylistCreated(true)\r\n              });\r\n            });\r\n        });\r\n    });\r\n  };\r\n\r\n  //EXPERIMENTAL FUNCTIONALITY - meant to create a playlist from similar songs to every song in a given playlist\r\n\r\n  // // worth noting that we should also include the current artist into this. this would be handled in the get similar artists\r\n  // const createPlaylistFromPlaylist_Song = id => {\r\n\r\n  //   discoveryService.getNumberOfTracksInPlaylist(id, header)\r\n  //   .then(numberOfTracks => {\r\n  //     discoveryService.getPlaylistsTracks(id, numberOfTracks, header).then(allTracks => {\r\n  //       console.log('allTRACKSSS', allTracks)\r\n  //       const limiter1 = new Bottleneck({\r\n  //         maxConcurrent:1,\r\n  //         minTime:5000\r\n  //       })\r\n  //       const limiter2 = new Bottleneck({\r\n  //         maxConcurrent:1,\r\n  //         minTime:1000\r\n  //       })\r\n  //       const promises = allTracks.map(val => {\r\n  //         const id = val.id\r\n  //         const songID = val.songID\r\n  //         limiter1.schedule(() => discoveryService.getSimilarArtists(id, header).then(relatedArtists => {\r\n  //           limiter2.schedule(() => discoveryService\r\n  //             .getArtistsAlbums(relatedArtists, header)\r\n  //             .then(allAlbums => {\r\n  //               discoveryService\r\n  //                 .getAlbumsTracks(allAlbums, header)\r\n  //                 .then(allTracks => {\r\n  //                   discoveryService\r\n  //                     .getAudioFeatures(allTracks, header)\r\n  //                     .then(allAudioFeatures => {\r\n  //                       discoveryService\r\n  //                         .getAudioFeature(songID, header)\r\n  //                         .then(songAudioFeatures => {\r\n  //                           console.log(\"songaudiofeatures\", songAudioFeatures);\r\n  //                           return allAudioFeatures\r\n  //                             .filter(feature => {\r\n  //                               return (\r\n  //                                 feature.tempo > songAudioFeatures.tempo * 0.9 &&\r\n  //                                 feature.tempo < songAudioFeatures.tempo * 1.1 &&\r\n  //                                 (feature.energy > songAudioFeatures.energy * 0.8 &&\r\n  //                                   feature.energy <\r\n  //                                     songAudioFeatures.energy * 1.2) &&\r\n  //                                 (feature.valence >\r\n  //                                   songAudioFeatures.valence * 0.8 &&\r\n  //                                   feature.valence < songAudioFeatures.valence * 1.2)\r\n  //                               );\r\n  //                             })\r\n  //                             .map(features => features.uri);\r\n  //                             //return similarSongs\r\n  //                         })\r\n  //                     })\r\n  //                 })\r\n  //             }))\r\n  //         }))\r\n\r\n  //       })\r\n  //       return Promise.all(promises).then(response => {\r\n  //         console.log('THE ONLY RESPONSE IM LOOKING FOR', response)\r\n  //       })\r\n  //     })\r\n  //   })\r\n\r\n  // };\r\n\r\n  const createPlaylistWithSimilarSongs = (id, songID) => {\r\n    discoveryService.getSimilarArtists(id, header).then(relatedArtists => {\r\n      discoveryService\r\n        .getArtistsAlbums(relatedArtists, header)\r\n        .then(allAlbums => {\r\n          discoveryService\r\n            .getAlbumsTracks(allAlbums, header)\r\n            .then(allTracks => {\r\n              discoveryService\r\n                .getAudioFeatures(allTracks, header)\r\n                .then(allAudioFeatures => {\r\n                  discoveryService\r\n                    .getAudioFeature(songID, header)\r\n                    .then(songAudioFeatures => {\r\n                      const similarSongs = allAudioFeatures\r\n                        .filter(feature => {\r\n                          return (\r\n                            feature.tempo > songAudioFeatures.tempo * 0.9 &&\r\n                            feature.tempo < songAudioFeatures.tempo * 1.1 &&\r\n                            (feature.energy > songAudioFeatures.energy * 0.8 &&\r\n                              feature.energy <\r\n                                songAudioFeatures.energy * 1.2) &&\r\n                            (feature.valence >\r\n                              songAudioFeatures.valence * 0.8 &&\r\n                              feature.valence < songAudioFeatures.valence * 1.2)\r\n                          );\r\n                        })\r\n                        .map(features => features.uri);\r\n                      discoveryService\r\n                        .createPlaylist(header, setCreatedPlaylistId)\r\n                        .then(playlist_id => {\r\n                          discoveryService.populatePlaylist(\r\n                            similarSongs,\r\n                            playlist_id,\r\n                            header\r\n                          ).then(response => {\r\n                            console.log('playlist created', response)\r\n                            setPlaylistCreated(true)\r\n                          })\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    });\r\n  };\r\n\r\n  const listOfPlaylists = userPlaylists.map(info => (\r\n    <MusicItem\r\n      key={info.id}\r\n      id={[info.id]}\r\n      image={info.image}\r\n      name={info.name}\r\n      functionToExecute={createPlaylistFromPlaylist_Artist}\r\n      isPlaylistCreated={playlistCreated}\r\n    />\r\n  ));\r\n\r\n  const listOfArtists = artists.map(info => (\r\n    <MusicItem\r\n      key={info.id}\r\n      id={[info.id]}\r\n      image={info.image}\r\n      name={info.name}\r\n      functionToExecute={createPlaylistWithSimilarArtists}\r\n      isPlaylistCreated={playlistCreated}\r\n    />\r\n  ));\r\n\r\n  const listOfSongs = songs.map(info => (\r\n    <MusicItem\r\n      key={info.id}\r\n      id={[info.artist_id, info.id]}\r\n      image={info.image}\r\n      name={`${info.name} - ${info.artist}`}\r\n      functionToExecute={createPlaylistWithSimilarSongs}\r\n      isPlaylistCreated={playlistCreated}\r\n    />\r\n  ));\r\n\r\n  const MainMenu = (\r\n    <>\r\n      {isMainMenuVisible ? (\r\n        \r\n        <Grid\r\n          container\r\n          direction=\"column\"\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n          spacing={2}\r\n          style={{ minHeight: \"80vh\", margin: \"0\", width: \"100%\" }}\r\n        >\r\n          <h2>Select an option from the list below</h2>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"large\"\r\n              onClick={() => {\r\n                togglePlaylistPage();\r\n                toggleMainMenu();\r\n              }}\r\n            >\r\n              import playlist\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"large\"\r\n              onClick={() => {\r\n                toggleArtistPage();\r\n                toggleMainMenu();\r\n              }}\r\n            >\r\n              search artist\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"large\"\r\n              onClick={() => {\r\n                toggleSongPage();\r\n                toggleMainMenu();\r\n              }}\r\n            >\r\n              search song\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      ) : null}\r\n    </>\r\n  );\r\n\r\n  const PlaylistPage = (\r\n    <>\r\n      {isPlaylistPageVisible ? (\r\n        <div>\r\n          <IconButton\r\n            className={classes.back_button}\r\n            onClick={() => {\r\n              togglePlaylistPage();\r\n              toggleMainMenu();\r\n            }}\r\n          >\r\n            <ArrowBackIcon fontSize=\"large\" />\r\n          </IconButton>\r\n          <UserInfo\r\n            header={header}\r\n            setUserData={setUserData}\r\n            setUserPlaylists={setUserPlaylists}\r\n          ></UserInfo>\r\n          <MusicContainer musicItems={listOfPlaylists} />\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {isLoginVisible ? (\r\n        <button onClick={() => authenticateUser()}>authenticate</button>\r\n      ) : null}\r\n      {/* {isLoginVisible ? <button onClick={() => toggleMainMenu()} >authenticate</button> : null} */}\r\n\r\n      {MainMenu}\r\n      {PlaylistPage}\r\n      <SearchContainer\r\n        isPageVisible={isArtistPageVisible}\r\n        togglePage={toggleArtistPage}\r\n        toggleMainMenu={toggleMainMenu}\r\n        searchLabel=\"Artist name\"\r\n        newSearch={newArtistSearch}\r\n        handleSearch={handleArtistSearch}\r\n        header={header}\r\n        setValues={setArtists}\r\n        type=\"artist\"\r\n        musicItems={listOfArtists}\r\n      />\r\n      <SearchContainer\r\n        isPageVisible={isSongPageVisible}\r\n        togglePage={toggleSongPage}\r\n        toggleMainMenu={toggleMainMenu}\r\n        searchLabel=\"Song name\"\r\n        newSearch={newSongSearch}\r\n        handleSearch={handleSongSearch}\r\n        header={header}\r\n        setValues={setSongs}\r\n        type=\"song\"\r\n        musicItems={listOfSongs}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));","module.exports = __webpack_public_path__ + \"static/media/placeholder.f7c55a13.png\";"],"sourceRoot":""}